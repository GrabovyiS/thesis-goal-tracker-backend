generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id          String       @id @default(cuid())
  googleId    String       @unique
  email       String
  name        String
  picture   String?
  goals       Goal[]
  quests      Quest[]
  tasks       Task[]
  activeTasks ActiveTask[]
  reward      Reward[]
  log         Log[]
  role      String    @default("USER")
}

model Goal {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  quests      Quest[]
  completed   Boolean  @default(false)
}

model Quest {
  id          String    @id @default(cuid())
  title       String
  description String?
  deadline    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  goal        Goal      @relation(fields: [goalId], references: [id], onDelete: Cascade)
  goalId      String
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  tasks       Task[]
  rewards     Reward[]
  logs        Log[]
  completed   Boolean   @default(false)
}

model Task {
  id          String      @id @default(cuid())
  title       String
  description String?
  type        String
  value       Int?
  max         Int?
  done        Boolean     @default(false)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  quest       Quest       @relation(fields: [questId], references: [id], onDelete: Cascade)
  questId     String
  user        User        @relation(fields: [userId], references: [id])
  userId      String
  activeTask  ActiveTask?
  files       File[]
  completed   Boolean    @default(false)
}

model Log {
  id          String   @id @default(cuid())
  title       String
  description String
  createdAt   DateTime @default(now())
  quest       Quest    @relation(fields: [questId], references: [id], onDelete: Cascade)
  questId     String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
}

model Reward {
  id        String   @id @default(cuid())
  emoji     String
  title     String
  collected Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  questId   String
  quest     Quest    @relation(fields: [questId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model File {
  id        String   @id @default(cuid())
  name      String
  mimeType  String
  data      Bytes
  taskId    String
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ActiveTask {
  id       String @id @default(cuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  task     Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId   String @unique
  position Int
}
